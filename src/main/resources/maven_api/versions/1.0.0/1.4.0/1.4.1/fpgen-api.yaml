openapi: "3.0.0"
info:
  version: 1.4.1
  title: 'FpGen api'
  description: 'API for fake profile dataset generator project'

tags:
  - name: InstantMessage
  - name: ConversationMessage
  - name: Conversation
  - name: Generation
  - name: Dataset
  - name: Author
  - name: Statistic

paths:

#InstantMessage
  /v1/instantMessages:
    post:
      tags:
        - InstantMessage
      summary: "Generate instant messages"
      description: "Generate a instant messages"
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantMessageBatchCreation'

      responses:
        201:
          description: 'Instant messages generation request successfully sent'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/instantMessages/{instantMessageId}:
    get:
      tags:
        - InstantMessage
      summary: "Get a instant instant message"
      description: "Get a instant instant message"
      operationId: getInstantMessageById
      parameters:
        - $ref: '#/components/parameters/instantMessageId'
      responses:
        200:
          description: 'Instant message successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantMessage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - InstantMessage
      summary: "Delete a instant instant message"
      description: "Delete a instant instant message"
      operationId: deleteInstantMessageById
      parameters:
        - $ref: '#/components/parameters/instantMessageId'
      responses:
        204:
          description: 'Instant message successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/instantMessages/search:
    post:
      tags:
        - InstantMessage
      summary: "Search instant messages with pagination"
      description: "Search instant messages with pagination"
      operationId: searchInstantMessagesPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedInstantMessageQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantMessagesPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#Conversation
  /v1/conversations:
    post:
      tags:
        - Conversation
      summary: "Generate conversations"
      description: "Generate conversations"
      operationId: generateConversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationBatchCreation'

      responses:
        201:
          description: 'Conversations generation request successfully sent'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/conversations/{conversationId}:
    get:
      tags:
        - Conversation
      summary: "Get a conversation by id"
      description: "Get a conversation by id"
      operationId: getConversationById
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        200:
          description: 'Conversation successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Conversation
      summary: "Delete a conversation by id"
      description: "Delete a conversation by id"
      operationId: deleteConversationById
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        204:
          description: 'Conversation successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #not very useful
  /v1/conversations/{conversationId}/{conversationInstantMessageId}:
    get:
      tags:
        - Conversation
      summary: "Get a conversation by id"
      description: "Get a conversation by id"
      operationId: getConversationInstantMessageListById
      parameters:
        - $ref: '#/components/parameters/conversationId'
        - $ref: '#/components/parameters/conversationInstantMessageId'
      responses:
        200:
          description: 'Conversation instant message successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationMessage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/conversations/search:
    post:
      tags:
        - Conversation
      summary: "Search conversations with pagination"
      description: "Search conversations with pagination"
      operationId: searchConversationsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedConversationQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #conversationMessages
  /v1/conversationMessages/search:
    post:
      tags:
        - ConversationMessage
      summary: "Search conversation messages with pagination"
      description: "Search conversation messages with pagination"
      operationId: searchConversationMessagesPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedConversationMessageQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationMessagesPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #Generation
  /v1/generations/{generationId}:
    get:
      tags:
        - Generation
      summary: "Get a generation by id"
      description: "Get a generation by id"
      operationId: getGenerationById
      parameters:
        - $ref: '#/components/parameters/generationId'
      responses:
        200:
          description: 'Generation successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Generation
      summary: "Delete a generation by id"
      description: "Delete a generation by id"
      operationId: deleteGenerationById
      parameters:
        - $ref: '#/components/parameters/generationId'
        - $ref: '#/components/parameters/generationType'
      responses:
        204:
          description: 'Generation successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/generations/search:
    post:
      tags:
        - Generation
      summary: "Search generations with pagination"
      description: "Search generations with pagination"
      operationId: searchGenerationsPaginate
      parameters:
        - $ref: '#/components/parameters/generationType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedGenerationQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerationsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#Authors
  /v1/authors:
    post:
      tags:
        - Author
      summary: "Create author"
      description: "Create author"
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreation'
      responses:
        200:
          description: 'Author successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Author
      summary: "Get authors"
      description: "Get authors"
      operationId: getAuthorList
      responses:
        200:
          description: 'Authors successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/authors/{authorId}:
    get:
      tags:
        - Author
      summary: "Get a author by id"
      description: "Get a author by id"
      operationId: getAuthorById
      parameters:
        - $ref: '#/components/parameters/authorId'
      responses:
        200:
          description: 'Author successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/authors/search:
    post:
      tags:
        - Author
      summary: "Search authors with pagination"
      description: "Search authors with pagination"
      operationId: searchAuthorsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedAuthorQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#Dataset
  /v1/datasets:
    post:
      tags:
        - Dataset
      summary: "Create dataset"
      description: "Create dataset"
      operationId: createDataset
      parameters:
        - $ref: '#/components/parameters/datasetType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCreation'
      responses:
        200:
          description: 'Dataset successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}:
    get:
      tags:
        - Dataset
      summary: "Get a dataset by id"
      description: "Get a dataset by id"
      operationId: getDatasetById
      parameters:
        - $ref: '#/components/parameters/datasetId'
        - $ref: '#/components/parameters/datasetType'
      responses:
        200:
          description: 'Dataset successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    post:
      tags:
        - Dataset
      summary: "Add generations to dataset"
      description: "Add generations to dataset"
      operationId: addGenerationListToDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
        - $ref: '#/components/parameters/datasetType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'common.yaml#/components/schemas/UUID'
      responses:
        201:
          description: 'Generations successfully added to dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    put:
      tags:
        - Dataset
      summary: "Remove generations from dataset"
      description: "Remove generations from dataset"
      operationId: removeGenerationFromDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
        - $ref: '#/components/parameters/datasetType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'common.yaml#/components/schemas/UUID'
      responses:
        204:
          description: 'Generations successfully removed from dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Dataset
      summary: "Delete dataset"
      description: "Delete dataset"
      operationId: deleteDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
        - $ref: '#/components/parameters/datasetType'
      responses:
        204:
          description: 'Dataset successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/search:
    post:
      tags:
        - Dataset
      summary: "Search datasets with pagination"
      description: "Search datasets with pagination"
      operationId: searchDatasetsPaginate
      parameters:
        - $ref: '#/components/parameters/datasetType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedDatasetQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

# components
components:
  parameters:
    instantMessageId:
      name: instantMessageId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    conversationId:
      name: conversationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    conversationInstantMessageId:
      name: conversationInstantMessageId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    generationId:
      name: generationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    generationType:
      name: generationType
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/GenerationType'

    authorId:
      name: authorId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    datasetId:
      name: datasetId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    datasetType:
      name: datasetType
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/DatasetType'

    statisticId:
      name: statisticId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

  schemas:
    # bodies
    # request bodies
    InstantMessageBatchCreation:
        type: object
        required:
            - instantMessageCreationList
        properties:
          instantMessageCreationList:
            type: array
            items:
              $ref: '#/components/schemas/GenerationCreation'

    ConversationBatchCreation:
      type: object
      required:
        - conversationCreationList
      properties:
        conversationCreationList:
          type: array
          items:
            $ref: '#/components/schemas/GenerationCreation'
        minInteractionNumber:
            type: integer
        maxInteractionNumber:
            type: integer

    # response bodies
    Interlocutor:
      type: object
      properties:
        id:
          type: integer
        interlocutorType:
          $ref: '#/components/schemas/InterlocutorType'

    InstantMessage:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        content:
          type: string
        generationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationBusinessId:
          type: string

    ConversationMessage:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        conversationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        content:
          type: string
        sender:
          $ref: '#/components/schemas/Interlocutor'
        receiver:
          $ref: '#/components/schemas/Interlocutor'

    Conversation:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        conversationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        maxInteractionNumber:
          type: integer
        minInteractionNumber:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ConversationMessage'

    ConversationSummary:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationBusinessId:
          type: string
        generationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        maxInteractionNumber:
          type: integer
        minInteractionNumber:
          type: integer

    AuthorCreation:
      type: object
      required:
        - lastName
        - firstName
        - trigram
        - organization
        - authorFunction
        - email
        - phoneNumber
      properties:
        lastName:
          type: string
        firstName:
          type: string
        trigram:
          type: string
        organization:
          type: string
        authorFunction:
          type: string
        email:
          type: string
        phoneNumber:
          type: string

    Author:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        lastName:
          type: string
        firstName:
          type: string
        trigram:
          type: string
        organization:
          type: string
        authorFunction:
          type: string
        email:
          type: string
        phoneNumber:
          type: string

    GenerationCreation:
      type: object
      required:
        - authorId
        - topic
        - type
        - quantity
      properties:
        authorId:
          $ref: 'common.yaml#/components/schemas/UUID'
        topic:
          $ref: '#/components/schemas/MessageTopic'
        type:
          $ref: '#/components/schemas/MessageType'
        quantity:
          type: integer
        systemPrompt:
          type: string
        userPrompt:
          type: string

    Generation:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationId:
          type: string
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        modificationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        generationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        generationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        userPrompt:
          type: string
        systemPrompt:
          type: string
        author:
          type: string
        details:
          type: string
        quantity:
          type: integer
        datasetId:
          $ref: 'common.yaml#/components/schemas/UUID'

    DatasetCreation:
      type: object
      required:
        - authorId
        - datasetFunction
        - type
      properties:
        authorId:
            $ref: 'common.yaml#/components/schemas/UUID'
        datasetFunction:
          $ref: '#/components/schemas/DatasetFunctionEnum'
        type:
          $ref: '#/components/schemas/DatasetType'
        version:
          type: string
        description:
          type: string
        comment:
          type: string
        name:
          type: string

    Dataset:
      type: object
      required:
        - generation
        - datasetFunction
        - type
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        modificationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        author:
          $ref: '#/components/schemas/Author'
        datasetFunction:
          $ref: '#/components/schemas/DatasetFunctionEnum'
        type:
          $ref: '#/components/schemas/DatasetType'
        name:
          type: string
        comment:
          type: string
        description:
          type: string
        version:
          type: string

    # enums
    DatasetType:
      type: string
      enum:
        - INSTANT_MESSAGE
        - CONVERSATION

    InterlocutorType:
      type: string
      enum:
        - GENUINE
        - TROLL
        - SOCIAL_ENGINEER
        -
    MessageType:
      type: string
      enum:
        - SOCIAL_ENGINEERING
        - TROLLING
        - GENUINE

    MessageTopic:
      type: string
      enum:
        - WORK
        - SPORT
        - POLITICS
        - SCIENCE
        - TECHNOLOGY
        - ART
        - MUSIC
        - MOVIES
        - GAMES
        - LITERATURE
        - PHILOSOPHY
        - RELIGION
        - HISTORY
        - GEOGRAPHY
        - ECONOMY
        - SOCIETY
        - HEALTH
        - EDUCATION
        - ENVIRONMENT
        - ROMANCE
        - OTHER

    GenerationType:
      type: string
      enum:
        - INSTANT_MESSAGE
        - CONVERSATION

    DatasetFunctionEnum:
      type: string
      enum:
        - TRAINING
        - TEST
        - VALIDATION

    ###############################################################################################################
    #For the pagination
    ###############################################################################################################
      #Generations
    PagedGenerationQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/GenerationQuery'
        sortField:
          $ref: '#/components/schemas/GenerationSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    GenerationQuery:
      type: object
      properties:
        generationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        userPrompt:
          type: string
        systemPrompt:
          type: string
        quantity:
          type: integer
        authorTrigram:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    GenerationSortEnum:
      type: string
      enum:
        - GENERATION_TYPE
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - USER_PROMPT
        - SYSTEM_PROMPT
        - QUANTITY
        - AUTHOR
        - DATE

    GenerationsPage:
      type: object
      required:
        - pagination
        - generations
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        generations:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Generation'

      #Conversations
    PagedConversationQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/ConversationQuery'
        sortField:
          $ref: '#/components/schemas/ConversationSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    ConversationQuery:
      type: object
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        maxInteractionNumber:
          type: integer
        minInteractionNumber:
          type: integer
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    ConversationSortEnum:
      type: string
      enum:
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - MAX_INTERACTION_NUMBER
        - MIN_INTERACTION_NUMBER
        - DATE

    ConversationsPage:
      type: object
      required:
        - pagination
        - conversations
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        conversations:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/ConversationSummary'

      #Conversation Messages
    PagedConversationMessageQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/ConversationMessageQuery'
        sortField:
          $ref: '#/components/schemas/ConversationMessageSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    ConversationMessageQuery:
      type: object
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        content:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    ConversationMessageSortEnum:
      type: string
      enum:
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - CONTENT
        - DATE

    ConversationMessagesPage:
      type: object
      required:
        - pagination
        - conversationMessages
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        conversationMessages:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/ConversationMessage'

    #Instant Messages
    PagedInstantMessageQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/InstantMessageQuery'
        sortField:
          $ref: '#/components/schemas/InstantMessageSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    InstantMessageQuery:
      type: object
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        content:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    InstantMessageSortEnum:
      type: string
      enum:
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - CONTENT
        - DATE

    InstantMessagesPage:
      type: object
      required:
        - pagination
        - instantMessages
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        instantMessages:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/InstantMessage'

    #Dataset
    PagedDatasetQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/DatasetQuery'
        sortField:
          $ref: '#/components/schemas/DatasetSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    DatasetQuery:
      type: object
      properties:
        datasetType:
          $ref: '#/components/schemas/DatasetType'
        version:
          type: string
        name:
          type: string
        description:
          type: string
        comment:
          type: string
        authorTrigram:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    DatasetSortEnum:
      type: string
      enum:
        - DATASET_TYPE
        - NAME
        - AUTHOR_TRIGRAM
        - DATE

    DatasetsPage:
      type: object
      required:
        - pagination
        - datasets
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        datasets:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Dataset'

    #Author
    PagedAuthorQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/AuthorQuery'
        sortField:
          $ref: '#/components/schemas/AuthorSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    AuthorQuery:
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        organization:
          type: string
        authorFunction:
          type: string
        trigram:
          type: string
        email:
          type: string

    AuthorSortEnum:
      type: string
      enum:
        - LASTNAME
        - FIRSTNAME
        - AUTHOR_TRIGRAM

    AuthorsPage:
      type: object
      required:
        - pagination
        - authors
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        authors:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Author'
            

